#!/usr/bin/env python3
import itertools
import random
import click


def get_all_combinations_for_divisor(par_divisor):
    max_dividend = par_divisor * 10
    return [(par_divisor, num) for num in range(max_dividend + 1)]


def generate(small_number_set, exercise_count, remainder_word):
    all_combinations = [p + (p[0] * p[1],) for p in itertools.product(small_number_set, repeat=2)]

    for _ in range(exercise_count):
        exercise = random.choice(all_combinations)
        print("%2d x %2d = " % (exercise[0], exercise[1]))
        print("\n------------------------------------------------------------------\n")

    print("\n==================================================================\n")

    for _ in range(exercise_count):
        exercise = random.choice(all_combinations)
        print("%2d : %2d = " % (exercise[2], exercise[1]))
        print("\n------------------------------------------------------------------\n")

    print("\n==================================================================\n")

    for _ in range(exercise_count):
        divisor = random.choice(small_number_set)
        exercise = random.choice(get_all_combinations_for_divisor(divisor))
        print("%2d : %2d =                       %s =  " % (exercise[1], exercise[0], remainder_word))
        print("\n------------------------------------------------------------------\n")


@click.group(context_settings=dict(help_option_names=['-h', '--help']), invoke_without_command=True)
@click.version_option(version='1.0.0')
@click.option('--small-number-set',
              envvar='SMALL_NUMBER_SET',
              help='List of small number from which is random choice made. Default value is (2, 3, 4, 5, 6, 7, 8, 9).',
              default=(2, 3, 4, 5, 6, 7, 8, 9), metavar='<small numbers list>', type=int, multiple=True)
@click.option('--exercise-count',
              help='Maximum count of exercises per type. Default value is 12',
              default=12, metavar='<count of exercises>', type=int)
@click.option('--remainder-word',
              help='By default in English. Feel free to rename it to your language',
              default='Remainder', metavar='<remainder value in text>', type=str)
def generator(small_number_set, exercise_count, remainder_word):
    """Examples of usage:

            multiplication-test-generator > test.txt

            multiplication-test-generator --remainder-word 'Zbytek po dělení'

            To change set of small numbers: export SMALL_NUMBER_SET='0 1 2 3 4 5'

            Following command shows version: multiplication-test-generator --version
        """
    generate(small_number_set, exercise_count, remainder_word)


if __name__ == '__main__':
    generator()
